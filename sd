[1mdiff --git a/DCControl b/DCControl[m
[1mindex f284fc3..8249f15 100755[m
Binary files a/DCControl and b/DCControl differ
[1mdiff --git a/obj/DCControl/main.o b/obj/DCControl/main.o[m
[1mindex c74855b..eeee8db 100644[m
Binary files a/obj/DCControl/main.o and b/obj/DCControl/main.o differ
[1mdiff --git a/src/DCControl/main.c b/src/DCControl/main.c[m
[1mindex c330f59..5691db7 100644[m
[1m--- a/src/DCControl/main.c[m
[1m+++ b/src/DCControl/main.c[m
[36m@@ -4,8 +4,8 @@[m
 #include "../input_manager/manager.h"[m
 [m
 #include "main.h"[m
[31m-#include <string.h>[m
[31m-#include <stdbool.h>[m
[32m+[m[32m#include "string.h"[m
[32m+[m[32m#include "stdbool.h"[m
 [m
 #include <sys/types.h>[m
 #include <unistd.h>[m
[36m@@ -27,10 +27,6 @@[m [mtypedef struct {[m
 [m
 ProcessData processes_array[1024]; //movi esto para arriba para que sea global y el sigchld_handler pueda usarlo[m
 [m
[31m-// globales para el modo shutdown[m
[31m-bool shutdown_mode = false;[m
[31m-time_t shutdown_start_time = 0;[m
[31m-[m
 // busca el primer espacio libre en el array, osea donde el pid == 0[m
 int find_free_slot(ProcessData *processes_array) {[m
     for (int i = 0; i < 1024; i++) {[m
[36m@@ -84,37 +80,12 @@[m [mint main(int argc, char const *argv[])[m
     processes_array[i].pid = 0;[m
     processes_array[i].exit_code = -1;[m
     processes_array[i].signal_value = -1;[m
[31m-    processes_array[i].is_alive = false; [m
[31m-  }[m
[32m+[m[32m    processes_array[i].is_alive = false;[m
[32m+[m[32m}[m
 [m
 [m
   // Loop de comandos[m
   while (true) {[m
[31m-    // MODO SHUTDOWN: si hay modo shutdown, verifica si han pasado 10 segundos[m
[31m-    if (shutdown_mode) {[m
[31m-      if (difftime(time(NULL), shutdown_start_time) >= 10) {[m
[31m-        // envia SIGKILL a procesos vivos[m
[31m-        for (int i = 0; i < 1024; i++) {[m
[31m-          if (processes_array[i].is_alive) {[m
[31m-            kill(processes_array[i].pid, SIGKILL);[m
[31m-          }[m
[31m-        }[m
[31m-        // imprimir estad√≠sticas y terminar[m
[31m-        printf("DDControl finalizado.\n");[m
[31m-        printf("%-8s %-10s %-20s %-12s %-13s\n", "PID", "Nombre", "Tiempo de ejecuci√≥n", "Exit code", "Signal Value");[m
[31m-        for (int i = 0; i < 1024; i++) {[m
[31m-          if (processes_array[i].pid != 0) {[m
[31m-            printf("%-8d %-10s %-20ld %-12d %-13d\n",[m
[31m-                  processes_array[i].pid,[m
[31m-                  processes_array[i].name,[m
[31m-                  processes_array[i].end_time - processes_array[i].start_time,[m
[31m-                  processes_array[i].exit_code,[m
[31m-                  processes_array[i].signal_value);[m
[31m-          }[m
[31m-        }[m
[31m-        exit(EXIT_SUCCESS);[m
[31m-      }[m
[31m-    }[m
     char** input = read_user_input();[m
     printf("%s\n", input[0]);[m
 [m
[36m@@ -169,6 +140,7 @@[m [mint main(int argc, char const *argv[])[m
               "PID", "Nombre", "Tiempo de ejecuci√≥n", "Exit code", "Signal Value");[m
 [m
         for (int i = 0; i < 1024; i++) {[m
[32m+[m
             //esto es para ver el tiempo de ejecucion que lleva un proceso que aun no ha terminado[m
             if (processes_array[i].pid != 0) {[m
               long runtime;[m
[36m@@ -194,35 +166,30 @@[m [mint main(int argc, char const *argv[])[m
           }[m
         }[m
         exit(EXIT_SUCCESS);[m
[31m-      }[m
     }[m
[32m+[m[32m  }[m
 [m
     // abort <time>[m
     else if (strcmp(input[0], "abort") == 0) {[m
[31m-      // si se est√° en modo shutdown, se ignoran los aborts[m
[31m-      if (shutdown_mode) {[m
[31m-        printf("abort ignorado, shotdown en proceso.\n");[m
[31m-      } else {[m
[31m-[m
[31m-        //convertimos el time ingresado a un int[m
[31m-        int seconds = atoi(input[1]);[m
[32m+[m[32m      //convertimos el time ingresado a un int[m
[32m+[m[32m      int seconds = atoi(input[1]);[m
 [m
[31m-        //esto es para ver los procesos que estaban vivos al momento de ejecutar el comando abort[m
[31m-        pid_t to_kill[1024];  //aqui guardamos los id de los procesos a abortar[m
[31m-        int cantidad_alive = 0;[m
[32m+[m[32m      //esto es para ver los procesos que estaban vivos al momento de ejecutar el comando abort[m
[32m+[m[32m      pid_t to_kill[1024];  //aqui guardamos los id de los procesos a abortar[m
[32m+[m[32m      int cantidad_alive = 0;[m
 [m
[31m-        //verificamos si hay procesos alive[m
[31m-        for (int i = 0; i < 1024; i++) {[m
[31m-            if (processes_array[i].pid != 0 && processes_array[i].is_alive) {[m
[31m-              //guardamos el pid del proceso en process_array y aumentamos cantidad_alive en 1[m
[31m-              to_kill[cantidad_alive++] = processes_array[i].pid;[m
[31m-            }[m
[31m-        }[m
[31m-        [m
[31m-        //si no hay ningun proceso alive entonces imprime que no hay procesos en ejecucion[m
[31m-        if (cantidad_alive == 0) {[m
[31m-            printf("No hay procesos en ejecuci√≥n. Abort no se puede ejecutar.\n");[m
[31m-        } else {[m
[32m+[m[32m      //verificamos si hay procesos alive[m
[32m+[m[32m      for (int i = 0; i < 1024; i++) {[m
[32m+[m[32m          if (processes_array[i].pid != 0 && processes_array[i].is_alive) {[m
[32m+[m[32m            //guardamos el pid del proceso en process_array y aumentamos cantidad_alive en 1[m
[32m+[m[32m            to_kill[cantidad_alive++] = processes_array[i].pid;[m
[32m+[m[32m          }[m
[32m+[m[32m      }[m
[32m+[m[41m      [m
[32m+[m[32m      //si no hay ningun proceso alive entonces imprime que no hay procesos en ejecucion[m
[32m+[m[32m      if (cantidad_alive == 0) {[m
[32m+[m[32m          printf("No hay procesos en ejecuci√≥n. Abort no se puede ejecutar.\n");[m
[32m+[m[32m      } else {[m
           // esperamos los segundos que se indicaron en <time>[m
           sleep(seconds);[m
 [m
[36m@@ -258,48 +225,11 @@[m [mint main(int argc, char const *argv[])[m
             }[m
           }[m
         }[m
[31m-      }[m
     }[m
 [m
     // shutdown[m
     else if (strcmp(input[0], "shutdown") == 0) {[m
[31m-      // verificar si hay procesos vivos[m
[31m-      bool any_alive = false;[m
[31m-      for (int i = 0; i < 1024; i++) {[m
[31m-        if (processes_array[i].is_alive) {[m
[31m-          any_alive = true;[m
[31m-          break;[m
[31m-        }[m
[31m-      }[m
[31m-[m
[31m-      if (!any_alive) {[m
[31m-        // no hay procesos vivos, imprimir estad√≠sticas y terminar inmediatamente[m
[31m-        printf("DDControl finalizado.\n");[m
[31m-        printf("%-8s %-10s %-20s %-12s %-13s\n", "PID", "Nombre", "Tiempo de ejecuci√≥n", "Exit code", "Signal Value");[m
[31m-        for (int i = 0; i < 1024; i++) {[m
[31m-          if (processes_array[i].pid != 0) {[m
[31m-            printf("%-8d %-10s %-20ld %-12d %-13d\n",[m
[31m-                  processes_array[i].pid,[m
[31m-                  processes_array[i].name,[m
[31m-                  processes_array[i].end_time - processes_array[i].start_time,[m
[31m-                  processes_array[i].exit_code,[m
[31m-                  processes_array[i].signal_value);[m
[31m-          }[m
[31m-        }[m
[31m-        exit(EXIT_SUCCESS);[m
[31m-      } else {[m
[31m-        // hay procesos vivos, enviar SIGINT a todos los que se esten ejecutando[m
[31m-        for (int i = 0; i < 1024; i++) {[m
[31m-          if (processes_array[i].is_alive) {[m
[31m-            kill(processes_array[i].pid, SIGINT);[m
[31m-          }[m
[31m-        }[m
[31m-        // activar modo shutdown y guardar tiempo de inicio[m
[31m-        shutdown_mode = true;[m
[31m-        shutdown_start_time = time(NULL);[m
[31m-        // debug: printf("shutdown iniciado. El programa aceptar√° comandos por 10 segundos antes de finalizar.\n");[m
[31m-        // el resto de la l√≥gica se maneja en el loop principal[m
[31m-      }[m
[32m+[m[41m     [m
     }[m
 [m
     // emergency[m
